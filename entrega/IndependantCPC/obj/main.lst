                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _menu
                             13 	.globl _inicializar
                             14 	.globl _interrupcion
                             15 	.globl _playmusic
                             16 	.globl _play
                             17 	.globl _cpct_akp_musicPlay
                             18 	.globl _cpct_akp_musicInit
                             19 	.globl _cpct_getScreenPtr
                             20 	.globl _cpct_setPALColour
                             21 	.globl _cpct_setPalette
                             22 	.globl _cpct_setVideoMode
                             23 	.globl _cpct_drawStringM0
                             24 	.globl _cpct_drawSprite
                             25 	.globl _cpct_isKeyPressed
                             26 	.globl _cpct_scanKeyboard_if
                             27 	.globl _cpct_scanKeyboard_f
                             28 	.globl _cpct_memset
                             29 	.globl _cpct_setInterruptHandler
                             30 	.globl _cpct_disableFirmware
                             31 	.globl _mostrarMenu
                             32 ;--------------------------------------------------------
                             33 ; special function registers
                             34 ;--------------------------------------------------------
                             35 ;--------------------------------------------------------
                             36 ; ram data
                             37 ;--------------------------------------------------------
                             38 	.area _DATA
   0000                      39 _interrupcion_kk_1_84:
   0000                      40 	.ds 1
                             41 ;--------------------------------------------------------
                             42 ; ram data
                             43 ;--------------------------------------------------------
                             44 	.area _INITIALIZED
   0000                      45 _mostrarMenu::
   0000                      46 	.ds 1
                             47 ;--------------------------------------------------------
                             48 ; absolute external ram data
                             49 ;--------------------------------------------------------
                             50 	.area _DABS (ABS)
                             51 ;--------------------------------------------------------
                             52 ; global & static initialisations
                             53 ;--------------------------------------------------------
                             54 	.area _HOME
                             55 	.area _GSINIT
                             56 	.area _GSFINAL
                             57 	.area _GSINIT
                             58 ;--------------------------------------------------------
                             59 ; Home
                             60 ;--------------------------------------------------------
                             61 	.area _HOME
                             62 	.area _HOME
                             63 ;--------------------------------------------------------
                             64 ; code
                             65 ;--------------------------------------------------------
                             66 	.area _CODE
                             67 ;src/main.c:30: void playmusic() {
                             68 ;	---------------------------------
                             69 ; Function playmusic
                             70 ; ---------------------------------
   0000                      71 _playmusic::
                             72 ;src/main.c:45: __endasm;
   0000 D9            [ 4]   73 	exx
   0001 08                   74 	.db	#0x08
   0002 F5            [11]   75 	push	af
   0003 C5            [11]   76 	push	bc
   0004 D5            [11]   77 	push	de
   0005 E5            [11]   78 	push	hl
   0006 CDr00r00      [17]   79 	call	_cpct_akp_musicPlay
   0009 E1            [10]   80 	pop	hl
   000A D1            [10]   81 	pop	de
   000B C1            [10]   82 	pop	bc
   000C F1            [10]   83 	pop	af
   000D 08                   84 	.db	#0x08
   000E D9            [ 4]   85 	exx
   000F C9            [10]   86 	ret
                             87 ;src/main.c:48: void interrupcion() {
                             88 ;	---------------------------------
                             89 ; Function interrupcion
                             90 ; ---------------------------------
   0010                      91 _interrupcion::
                             92 ;src/main.c:51: if (++kk == 5) {
   0010 21r00r00      [10]   93 	ld	hl, #_interrupcion_kk_1_84+0
   0013 34            [11]   94 	inc	(hl)
   0014 3Ar00r00      [13]   95 	ld	a,(#_interrupcion_kk_1_84 + 0)
   0017 D6 05         [ 7]   96 	sub	a, #0x05
   0019 C0            [11]   97 	ret	NZ
                             98 ;src/main.c:52: playmusic();
   001A CDr00r00      [17]   99 	call	_playmusic
                            100 ;src/main.c:53: cpct_scanKeyboard_if();
   001D CDr00r00      [17]  101 	call	_cpct_scanKeyboard_if
                            102 ;src/main.c:54: kk = 0;
   0020 21r00r00      [10]  103 	ld	hl,#_interrupcion_kk_1_84 + 0
   0023 36 00         [10]  104 	ld	(hl), #0x00
   0025 C9            [10]  105 	ret
                            106 ;src/main.c:57: void inicializar(){
                            107 ;	---------------------------------
                            108 ; Function inicializar
                            109 ; ---------------------------------
   0026                     110 _inicializar::
                            111 ;src/main.c:58: cpct_disableFirmware();
   0026 CDr00r00      [17]  112 	call	_cpct_disableFirmware
                            113 ;src/main.c:59: cpct_setBorder(HW_BLACK);
   0029 21 10 14      [10]  114 	ld	hl,#0x1410
   002C E5            [11]  115 	push	hl
   002D CDr00r00      [17]  116 	call	_cpct_setPALColour
                            117 ;src/main.c:60: cpct_setPalette(g_palette,16);
   0030 21 10 00      [10]  118 	ld	hl,#0x0010
   0033 E5            [11]  119 	push	hl
   0034 21r00r00      [10]  120 	ld	hl,#_g_palette
   0037 E5            [11]  121 	push	hl
   0038 CDr00r00      [17]  122 	call	_cpct_setPalette
                            123 ;src/main.c:63: cpct_setVideoMode(0);
   003B 2E 00         [ 7]  124 	ld	l,#0x00
   003D CDr00r00      [17]  125 	call	_cpct_setVideoMode
                            126 ;src/main.c:65: cpct_akp_musicInit(g_mysong);    // Initialize the music
   0040 21r00r00      [10]  127 	ld	hl,#_g_mysong
   0043 E5            [11]  128 	push	hl
   0044 CDr00r00      [17]  129 	call	_cpct_akp_musicInit
   0047 F1            [10]  130 	pop	af
                            131 ;src/main.c:66: cpct_setInterruptHandler(interrupcion);
   0048 21r10r00      [10]  132 	ld	hl,#_interrupcion
   004B CDr00r00      [17]  133 	call	_cpct_setInterruptHandler
   004E C9            [10]  134 	ret
                            135 ;src/main.c:69: void menu(){
                            136 ;	---------------------------------
                            137 ; Function menu
                            138 ; ---------------------------------
   004F                     139 _menu::
                            140 ;src/main.c:72: cpct_clearScreen(0);
   004F 21 00 40      [10]  141 	ld	hl,#0x4000
   0052 E5            [11]  142 	push	hl
   0053 AF            [ 4]  143 	xor	a, a
   0054 F5            [11]  144 	push	af
   0055 33            [ 6]  145 	inc	sp
   0056 26 C0         [ 7]  146 	ld	h, #0xC0
   0058 E5            [11]  147 	push	hl
   0059 CDr00r00      [17]  148 	call	_cpct_memset
                            149 ;src/main.c:73: cpct_drawSprite (g_flores1_0,
   005C 21 28 0A      [10]  150 	ld	hl,#0x0A28
   005F E5            [11]  151 	push	hl
   0060 21 00 C0      [10]  152 	ld	hl,#0xC000
   0063 E5            [11]  153 	push	hl
   0064 21r00r00      [10]  154 	ld	hl,#_g_flores1_0
   0067 E5            [11]  155 	push	hl
   0068 CDr00r00      [17]  156 	call	_cpct_drawSprite
                            157 ;src/main.c:76: cpct_drawSprite (g_flores1_1,
   006B 21 28 0A      [10]  158 	ld	hl,#0x0A28
   006E E5            [11]  159 	push	hl
   006F 26 C0         [ 7]  160 	ld	h, #0xC0
   0071 E5            [11]  161 	push	hl
   0072 21r00r00      [10]  162 	ld	hl,#_g_flores1_1
   0075 E5            [11]  163 	push	hl
   0076 CDr00r00      [17]  164 	call	_cpct_drawSprite
                            165 ;src/main.c:80: cpct_drawSprite (g_flores2_0,
   0079 21 28 0A      [10]  166 	ld	hl,#0x0A28
   007C E5            [11]  167 	push	hl
   007D 21 E0 E6      [10]  168 	ld	hl,#0xE6E0
   0080 E5            [11]  169 	push	hl
   0081 21r00r00      [10]  170 	ld	hl,#_g_flores2_0
   0084 E5            [11]  171 	push	hl
   0085 CDr00r00      [17]  172 	call	_cpct_drawSprite
                            173 ;src/main.c:83: cpct_drawSprite (g_flores2_1,
   0088 21 28 0A      [10]  174 	ld	hl,#0x0A28
   008B E5            [11]  175 	push	hl
   008C 21 08 E7      [10]  176 	ld	hl,#0xE708
   008F E5            [11]  177 	push	hl
   0090 21r00r00      [10]  178 	ld	hl,#_g_flores2_1
   0093 E5            [11]  179 	push	hl
   0094 CDr00r00      [17]  180 	call	_cpct_drawSprite
                            181 ;src/main.c:87: cpct_drawSprite (g_portada_0,
   0097 21 28 42      [10]  182 	ld	hl,#0x4228
   009A E5            [11]  183 	push	hl
   009B 21 50 D0      [10]  184 	ld	hl,#0xD050
   009E E5            [11]  185 	push	hl
   009F 21r00r00      [10]  186 	ld	hl,#_g_portada_0
   00A2 E5            [11]  187 	push	hl
   00A3 CDr00r00      [17]  188 	call	_cpct_drawSprite
                            189 ;src/main.c:90: cpct_drawSprite (g_portada_1,
   00A6 21 28 42      [10]  190 	ld	hl,#0x4228
   00A9 E5            [11]  191 	push	hl
   00AA 21 78 D0      [10]  192 	ld	hl,#0xD078
   00AD E5            [11]  193 	push	hl
   00AE 21r00r00      [10]  194 	ld	hl,#_g_portada_1
   00B1 E5            [11]  195 	push	hl
   00B2 CDr00r00      [17]  196 	call	_cpct_drawSprite
                            197 ;src/main.c:94: cpct_drawStringM0("PRESS ENTER", cpct_getScreenPtr(CPCT_VMEM_START, 17, 160), 6, 0);
   00B5 21 11 A0      [10]  198 	ld	hl,#0xA011
   00B8 E5            [11]  199 	push	hl
   00B9 21 00 C0      [10]  200 	ld	hl,#0xC000
   00BC E5            [11]  201 	push	hl
   00BD CDr00r00      [17]  202 	call	_cpct_getScreenPtr
   00C0 4D            [ 4]  203 	ld	c,l
   00C1 44            [ 4]  204 	ld	b,h
   00C2 21 06 00      [10]  205 	ld	hl,#0x0006
   00C5 E5            [11]  206 	push	hl
   00C6 C5            [11]  207 	push	bc
   00C7 21r2Fr01      [10]  208 	ld	hl,#___str_0
   00CA E5            [11]  209 	push	hl
   00CB CDr00r00      [17]  210 	call	_cpct_drawStringM0
   00CE 21 06 00      [10]  211 	ld	hl,#6
   00D1 39            [11]  212 	add	hl,sp
   00D2 F9            [ 6]  213 	ld	sp,hl
                            214 ;src/main.c:95: if(player.vida == 0){
   00D3 3Ar49r00      [13]  215 	ld	a, (#(_player + 0x0049) + 0)
   00D6 B7            [ 4]  216 	or	a, a
   00D7 20 1E         [12]  217 	jr	NZ,00102$
                            218 ;src/main.c:96: cpct_drawStringM0("GAME OVER", cpct_getScreenPtr(CPCT_VMEM_START, 20, 110), 3, 0);
   00D9 21 14 6E      [10]  219 	ld	hl,#0x6E14
   00DC E5            [11]  220 	push	hl
   00DD 21 00 C0      [10]  221 	ld	hl,#0xC000
   00E0 E5            [11]  222 	push	hl
   00E1 CDr00r00      [17]  223 	call	_cpct_getScreenPtr
   00E4 4D            [ 4]  224 	ld	c,l
   00E5 44            [ 4]  225 	ld	b,h
   00E6 21 03 00      [10]  226 	ld	hl,#0x0003
   00E9 E5            [11]  227 	push	hl
   00EA C5            [11]  228 	push	bc
   00EB 21r3Br01      [10]  229 	ld	hl,#___str_1
   00EE E5            [11]  230 	push	hl
   00EF CDr00r00      [17]  231 	call	_cpct_drawStringM0
   00F2 21 06 00      [10]  232 	ld	hl,#6
   00F5 39            [11]  233 	add	hl,sp
   00F6 F9            [ 6]  234 	ld	sp,hl
   00F7                     235 00102$:
                            236 ;src/main.c:98: if(basesCapturadas == 6){
   00F7 3Ar00r00      [13]  237 	ld	a,(#_basesCapturadas + 0)
   00FA D6 06         [ 7]  238 	sub	a, #0x06
   00FC 20 1E         [12]  239 	jr	NZ,00105$
                            240 ;src/main.c:99: cpct_drawStringM0("YOU WON!", cpct_getScreenPtr(CPCT_VMEM_START, 24, 110), 3, 0);
   00FE 21 18 6E      [10]  241 	ld	hl,#0x6E18
   0101 E5            [11]  242 	push	hl
   0102 21 00 C0      [10]  243 	ld	hl,#0xC000
   0105 E5            [11]  244 	push	hl
   0106 CDr00r00      [17]  245 	call	_cpct_getScreenPtr
   0109 4D            [ 4]  246 	ld	c,l
   010A 44            [ 4]  247 	ld	b,h
   010B 21 03 00      [10]  248 	ld	hl,#0x0003
   010E E5            [11]  249 	push	hl
   010F C5            [11]  250 	push	bc
   0110 21r45r01      [10]  251 	ld	hl,#___str_2
   0113 E5            [11]  252 	push	hl
   0114 CDr00r00      [17]  253 	call	_cpct_drawStringM0
   0117 21 06 00      [10]  254 	ld	hl,#6
   011A 39            [11]  255 	add	hl,sp
   011B F9            [ 6]  256 	ld	sp,hl
                            257 ;src/main.c:101: do{
   011C                     258 00105$:
                            259 ;src/main.c:102: cpct_scanKeyboard_f();
   011C CDr00r00      [17]  260 	call	_cpct_scanKeyboard_f
                            261 ;src/main.c:103: }while(!cpct_isKeyPressed(Key_Enter));
   011F 21 00 40      [10]  262 	ld	hl,#0x4000
   0122 CDr00r00      [17]  263 	call	_cpct_isKeyPressed
   0125 7D            [ 4]  264 	ld	a,l
   0126 B7            [ 4]  265 	or	a, a
   0127 28 F3         [12]  266 	jr	Z,00105$
                            267 ;src/main.c:104: mostrarMenu = 0;
   0129 21r00r00      [10]  268 	ld	hl,#_mostrarMenu + 0
   012C 36 00         [10]  269 	ld	(hl), #0x00
   012E C9            [10]  270 	ret
   012F                     271 ___str_0:
   012F 50 52 45 53 53 20   272 	.ascii "PRESS ENTER"
        45 4E 54 45 52
   013A 00                  273 	.db 0x00
   013B                     274 ___str_1:
   013B 47 41 4D 45 20 4F   275 	.ascii "GAME OVER"
        56 45 52
   0144 00                  276 	.db 0x00
   0145                     277 ___str_2:
   0145 59 4F 55 20 57 4F   278 	.ascii "YOU WON!"
        4E 21
   014D 00                  279 	.db 0x00
                            280 ;src/main.c:109: void main(void) {
                            281 ;	---------------------------------
                            282 ; Function main
                            283 ; ---------------------------------
   014E                     284 _main::
                            285 ;src/main.c:111: inicializar();
   014E CDr26r00      [17]  286 	call	_inicializar
                            287 ;src/main.c:114: while (1){
   0151                     288 00104$:
                            289 ;src/main.c:115: cpct_akp_musicPlay();
   0151 CDr00r00      [17]  290 	call	_cpct_akp_musicPlay
                            291 ;src/main.c:116: if(mostrarMenu % 2 == 0){
   0154 21r00r00      [10]  292 	ld	hl,#_mostrarMenu+0
   0157 CB 46         [12]  293 	bit	0, (hl)
   0159 20 03         [12]  294 	jr	NZ,00102$
                            295 ;src/main.c:117: menu();
   015B CDr4Fr00      [17]  296 	call	_menu
   015E                     297 00102$:
                            298 ;src/main.c:119: play();
   015E CDr00r00      [17]  299 	call	_play
   0161 18 EE         [12]  300 	jr	00104$
                            301 	.area _CODE
                            302 	.area _INITIALIZER
   0000                     303 __xinit__mostrarMenu:
   0000 01                  304 	.db #0x01	; 1
                            305 	.area _CABS (ABS)
